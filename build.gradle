group 'info.picocli'
description 'Java command line parser with both an annotations API and a programmatic API. Usage help with ANSI styles and colors. Autocomplete. Nested subcommands. Easily included as source to avoid adding a dependency.'
version "$projectVersion"

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'jacoco'
apply plugin: 'distribution'
apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'java'
    sourceCompatibility = 1.5
    targetCompatibility = 1.5

    repositories {
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            // avoid "Could not resolve junit:junit-dep:[4.9,)" caused by stefanbirkner:system-rules when building offline
            force "junit:junit-dep:$junitDepVersion"
        }
    }
    configurations {
        ivy
    }
    dependencies {
        compileOnly "org.codehaus.groovy:groovy-all:$groovyVersion"
        ivy         "org.apache.ivy:ivy:$ivyVersion" // for Gradle
        testCompile "junit:junit:$junitVersion",
                    "org.hamcrest:hamcrest-core:$hamcrestCoreVersion",
                    "org.fusesource.jansi:jansi:$jansiVersion",
                    "org.codehaus.groovy:groovy-all:$groovyVersion",
                    "com.github.stefanbirkner:system-rules:$systemRulesVersion"

    }
    tasks.withType(GroovyCompile) {
        // this, and the `configurations {ivy}` section, are a workaround for the dreaded
        // java.lang.NoClassDefFoundError: org/apache/ivy/core/report/ResolveReport
        // that occurs when trying to compile a groovy script containing a @Grab annotation in gradle.
        // see https://stackoverflow.com/questions/18173908/error-compiling-a-groovy-project-using-grab-annotation
        groovyClasspath += configurations.ivy
    }
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }

    javadoc {
        destinationDir   = file("build/docs/apidocs")
    }
    // work around https://github.com/gradle/gradle/issues/4046
    javadoc.dependsOn('copyJavadocDocFiles')
    task copyJavadocDocFiles(type: Copy) {
        from('src/main/java')
        into 'build/docs/apidocs'
        include '**/doc-files/*.*'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    task testJar(type: Jar, dependsOn: compileTestJava) {
        from sourceSets.test.output
        classifier = 'tests'
    }
    task sourcesJar(type: Jar) {
        from sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    task testSourcesJar(type: Jar) {
        from sourceSets.test.java.srcDirs
        classifier = 'test-sources'
    }
    artifacts {
        archives javadocJar
        archives sourcesJar
        archives testSourcesJar
        archives testJar
        archives jar
    }
    distributions {
        main {
            baseName = "$archivesBaseName-all"
            contents {
                from jar
                from sourcesJar
                from testJar
                from testSourcesJar
                from javadocJar
                from ('LICENSE')
                from ("$rootDir/RELEASE-NOTES.md")
            }
        }
    }
}

jar {
    manifest {
        attributes 'Specification-Title'   : 'picocli',
                   'Specification-Vendor'  : 'Remko Popma',
                   'Specification-Version' : version,
                   'Implementation-Title'  : 'picocli',
                   'Implementation-Vendor' : 'Remko Popma',
                   'Implementation-Version': version,
                   'Main-Class'            : 'picocli.AutoComplete',
                   'Automatic-Module-Name' : 'info.picocli'
    }
}

javadoc.options.overview = "src/main/java/overview.html"
javadoc.dependsOn('asciidoctor')
asciidoctor {
    sourceDir = file('docs')
    outputDir = file('build/docs')
    logDocuments = true
}
jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
task bumpReadmeVersion {
    doLast {
        // README.md
        ant.replaceregexp(match: "$projectPreviousReleaseVersion", replace: "$version", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: '.', includes: 'README.md')
            fileset(dir: './picocli-codegen/', includes: 'README.md')
            fileset(dir: './picocli-shell-jline2/', includes: 'README.md')
            fileset(dir: './picocli-shell-jline3/', includes: 'README.md')
        }
    }
}
task bumpVersion {
    doLast {
        ant.replaceregexp(match: "\"$projectPreviousVersionRegex\"", replace: "\"$version\"", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'src/main/java/picocli', includes: 'CommandLine.java')
            fileset(dir: 'src/test/java/picocli', includes: 'CommandLineTest.java')
        }
        ant.replaceregexp(match: "version $projectPreviousVersionRegex", replace: "version $version", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'src/test/java/picocli', includes: 'AutoCompleteTest.java')
        }
        // Doc header
        ant.replaceregexp(match: ":revnumber: $projectPreviousVersionRegex", replace: ":revnumber: $version", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
            fileset(dir: 'docs', includes: 'quick-guide.adoc')
            fileset(dir: 'docs', includes: 'autocomplete.adoc')
            fileset(dir: 'docs', includes: 'picocli-3.0-programmatic-api.adoc')
        }
        // Downloads section, Gradle
        ant.replaceregexp(match: ":picocli:$projectPreviousVersionRegex", replace: ":picocli:$version", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
        }
        // Downloads section, Maven
        ant.replaceregexp(match: "<version>$projectPreviousVersionRegex</version>", replace: "<version>$version</version>", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
        }
        // Downloads section, SBT
        ant.replaceregexp(match: "\"picocli\" % \"$projectPreviousVersionRegex\"", replace: "\\\"picocli\\\" % \\\"$version\\\"", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
        }
        // Downloads section, Ivy
        ant.replaceregexp(match: "rev=\"$projectPreviousVersionRegex\"", replace: "rev=\\\"$version\\\"", flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
        }
        ant.replaceregexp(match: releaseDatePreviousRegex, replace: releaseDate, flags: 'g', byline: true, encoding: 'UTF8') {
            fileset(dir: 'docs', includes: 'index.adoc')
            fileset(dir: 'docs', includes: 'quick-guide.adoc')
            fileset(dir: 'docs', includes: 'autocomplete.adoc')
            fileset(dir: 'docs', includes: 'picocli-3.0-programmatic-api.adoc')
        }
    }
}
task copyDocs(type: Copy) {
    from('build/docs/html5/') { include '*.html' }
    from('build/docs/')       { exclude 'html5'}
    into 'docs'
}

ext {
    bintrayBaseUrl    = 'https://api.bintray.com/maven'
    bintrayRepository = 'picocli'
    bintrayPackage    = 'picocli'
    bintrayUsername   = System.getenv('BINTRAY_USER')
    bintrayApiKey     = System.getenv('BINTRAY_KEY')
}
publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact testJar
            artifact testSourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('packaging',     'jar')
                root.appendNode('name',          'picocli - a mighty tiny Command Line Interface')
                root.appendNode('description',   description)
                root.appendNode('url',           'http://picocli.info')
                root.appendNode('inceptionYear', '2017')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name',         'The Apache Software License, version 2.0')
                license.appendNode('url',          'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')

                def developer = root.appendNode('developers').appendNode('developer')
                developer.appendNode('id',    'rpopma')
                developer.appendNode('name',  'Remko Popma')
                developer.appendNode('email', 'rpopma@apache.org')

                def scm = root.appendNode('scm')
                scm.appendNode('connection',          'scm:git:https://github.com/remkop/picocli.git')
                scm.appendNode('developerConnection', 'scm:git:ssh://github.com:remkop/picocli.git')
                scm.appendNode('url',                 'https://github.com/remkop/picocli/tree/master')
            }
        }
    }
    repositories {
        maven {
            name 'myLocal'
            url "file://$rootDir/../repo/$bintrayUsername"
        }
        maven {
            name 'Bintray'
            url "$bintrayBaseUrl/$bintrayUsername/$bintrayRepository/$bintrayPackage"
            credentials {
                username = bintrayUsername
                password = bintrayApiKey
            }
        }
    }
}
/*
Release procedure:
1. edit version numbers: remove -SNAPSHOT classifier
2. gradlew bumpVersion
3. check modified files
4. gradlew clean build
5. gradlew copyDocs
6. update RELEASE-NOTES.md
7. gradlew bumpReadmeVersion
7a update README.md (latest version, release notes)
8. commit -m "Release picocli version ..."
9. tag v$version
10. gradlew publishPluginPublicationToBintrayRepository

11. edit version numbers: increase minor version and add -SNAPSHOT classifier
12. gradlew bumpVersion
13. check modified files
14. commit -m "Prepare for next development cycle"
15. push (make sure that Push Tags is checked)

16. Log in to GitHub, go to https://github.com/remkop/picocli/releases
17. Click the new tag, click Edit button, update title and release notes (copy from RELEASE-NOTES.md)
18. Upload picocli-$version.jar and picocli-all$version.zip to GitHub

19. Log in to Bintray
20. Navigate to the page for the new version
21. Edit version: Publication Date, Description, VCS tag, GitHub release notes file (RELEASE-NOTES.md)
22. On the version page, Release Notes tab, select GitHub File
23. Publish artifacts to JCenter
24. On the version page, Maven Central tab, sync to Maven (takes several minutes)

(When releasing from branch)
25. Switch to master
26. Update RELEASE-NOTES.md (insert changes from branch)
27. Update last release version in README
28. Update `projectPreviousVersion` in build.gradle
29. gradlew copyDocs
30. commit -m "Update master for release x.x (from branch x.x)"
*/
